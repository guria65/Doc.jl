#!/usr/bin/env julia

using Doc

doc"

== docdoc

This is a command-line program that extract all the docstrings out of
a Julia file (respecting `include` directives) to help produce manuals.
The program is a work in progress, but here is the intended API:

* `docdoc --plain` prints the unprocessed raw docstring. This allows users to
use an external program to process the docstring. Thus, users can use any
markup, like LaTeX, ReST or raw HTML.

* `docdoc` includes the *DocDoc* markup format. *DocDoc* is a subset of Asciidoc.
It is simpler, has a short learning curve, and is well suited for writing
program documentation. With it, `docdoc` can output other formats like HTML,
without requiring external programs.

----
docdoc example.jl          --  Output the unprocessed docstring.
docdoc --plain example.jl  --  Output the unprocessed docstring.
docdoc --html  exampe.jl   --  Output HTML.
docdoc --xml  exampe.jl    --  Output XML (Docbook).
----

I also want to think about how `docdoc` should support the `@doc` macro
provided by the JDoc.jl module.
"

if length(ARGS) == 0 || ARGS[1] == "--help" || ARGS[1] == "-h" || length(ARGS) > 2
	
	str =	"""
			This program extracts documentation strings from a Julia file,
			and prints it in an appropriate format.
			
			Usage:  docdoc [options] example.jl
			
			Options:   --plain       Plain text output.
			           --html        HTML output.
			           --xml         XML output (Docbook).
			           --dump        Print a dump tree.
			"""
	println(str)

else

	if length(ARGS) == 1
		ifile = ARGS[1]
		ofile = replace(ifile, r"\.jl$", "") * ".txt"
		
		write(open(ofile, "w"), readdoc(ifile))
		
	elseif ARGS[1] == "--plain"
		ifile = ARGS[2]
		ofile = replace(ifile, r"\.jl$", "") * ".txt"
		
		write(open(ofile, "w"), readdoc(ifile))
		
	else
		ext = replace(ARGS[1], "-", "")
		
		ifile = ARGS[2]
		ofile = replace(ifile, r"\.jl$", "") * ".$ext"
		
		writemime(open(ofile, "w"), "text/$ext", docdoc(readdoc(ifile)))
	end
	println("Wrote $ofile")
end

